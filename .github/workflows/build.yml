name: Build geosite.dat
on:
  workflow_dispatch:
  schedule:
    - cron: "30 0 */3 * *"
  push:
    branches:
      - main
    paths-ignore:
      - ".gitignore"
      - "LICENSE*"
      - "*.md"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom
          fetch-depth: 1

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community
          fetch-depth: 1

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum

      - name: Filter data directory based on sections
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          INTEREST_FILE="sections"
          DATA_DIR="./community/data"

          if [[ ! -f "$INTEREST_FILE" ]]; then
              echo "File $INTEREST_FILE not found."
              exit 1
          fi

          declare -A keep
          declare -A processed

          while IFS= read -r line; do
              line="${line//$'\r'/}"
              line="${line%%#*}"
              file="$(echo "$line" | xargs)"
              [[ -z "$file" ]] && continue
              keep["$file"]=1
          done < "$INTEREST_FILE"

          changed=1
          while [[ $changed -eq 1 ]]; do
              changed=0
              for file in "${!keep[@]}"; do
                  sanitized_file="${file//$'\r'/}"
                  sanitized_file="$(echo "$sanitized_file" | xargs)"
                  if [[ -z "${processed[$sanitized_file]:-}" ]]; then
                      processed["$sanitized_file"]=1
                      fullpath="$DATA_DIR/$sanitized_file"
                      if [[ -f "$fullpath" ]]; then
                          echo "Processing: $sanitized_file"
                          while IFS= read -r incl; do
                              incl="${incl//$'\r'/}"
                              incl="${incl#include:}"
                              incl="${incl%%#*}"
                              incl="$(echo "$incl" | xargs)"
                              if [[ -n "$incl" && -z "${keep[$incl]:-}" ]]; then
                                  keep["$incl"]=1
                                  changed=1
                              fi
                          done < <(grep '^include:' "$fullpath" || true)
                      else
                          if [[ "$fullpath" == *"#"* ]]; then
                              echo "Skipping warning for path with '#': $fullpath"
                          else
                              echo "Warning: File '$fullpath' not found."
                          fi
                      fi
                  fi
              done
          done

          echo "Files to keep:"
          for file in "${!keep[@]}"; do
              echo " - $file"
          done

          find "$DATA_DIR" -type f | while IFS= read -r filepath; do
              relpath="${filepath#$DATA_DIR/}"
              relpath="${relpath//$'\r'/}"
              if [[ -z "${keep[$relpath]:-}" ]]; then
                  echo "Removing: $filepath"
                  rm -f "$filepath"
              fi
          done


      - name: Set variables
        run: |
          echo "RELEASE_NAME=Geosite Release" >> $GITHUB_ENV
          echo "TAG_NAME=geosite-release" >> $GITHUB_ENV

          echo "ANTIFILTER_DOWNLOAD_COMMUNITY=https://community.antifilter.download/list/domains.lst" >> $GITHUB_ENV
          echo "ITDOG_INSIDE=https://raw.githubusercontent.com/itdoginfo/allow-domains/refs/heads/main/Russia/inside-raw.lst" >> $GITHUB_ENV
          echo "NO_RUSSIA=https://raw.githubusercontent.com/dartraiden/no-russia-hosts/refs/heads/master/hosts.txt" >> $GITHUB_ENV
          echo "TRACKERS=https://raw.githubusercontent.com/sakib-m/Pi-hole-Torrent-Blocklist/refs/heads/main/all-torrent-trackres.txt" >> $GITHUB_ENV
        shell: bash

      - name: Get and add domain lists
        run: |
          curl -sSL $ANTIFILTER_DOWNLOAD_COMMUNITY > ./antifilter-download-community.txt
          curl -sSL $ITDOG_INSIDE > ./itdog-inside.txt
          curl -sSL $NO_RUSSIA > ./no-russia.txt
          curl -sSL $TRACKERS > ./torrent-trackers.txt

          cp {antifilter-download-community,itdog-inside,no-russia,torrent-trackers}.txt ./community/data/
          for f in ./community/data/*.txt; do mv "$f" "${f//.txt/}"; done

      - name: Build Russia lists
        run: |
          echo "include:antifilter-download-community" > ./community/data/ru-bundle
          echo "include:itdog-inside" >> ./community/data/ru-bundle
          echo "include:no-russia" >> ./community/data/ru-bundle

      - name: Build geosite.dat file
        run: |
          cd custom || exit 1
          go run ./ -outputpath=../publish -exportlists= -datapath=../community/data -togfwlist=ru-bundle
          cd ../ && rm -rf custom
          rm -rf ./publish/gfwlist.txt

      - name: Generate geosite.dat sha256 hash
        run: |
          sha256sum ./publish/geosite.dat > ./publish/geosite.dat.sha256sum

      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add geosite "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"

          git push -f -u geosite release

      - name: Create or update release and upload top-level assets
        run: |
          if ! gh release view "${{ env.TAG_NAME }}" > /dev/null 2>&1; then
            gh release create "${{ env.TAG_NAME }}" -t "${{ env.RELEASE_NAME }}" -n "Release generated automatically" --target release --draft=false
          fi
          gh release upload "${{ env.TAG_NAME }}" $(find ./publish -maxdepth 1 -type f) --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
